import { CreateChannelDto, UpdateChannelDto, CreateMessageDto } from '../dto/channel.dto';
import { PrismaService } from '../../prisma/prisma.service';
import { Channel, ChannelMembership, Message, User } from '@prisma/client';
import { ChannelSocketDto } from 'src/dto/chat.dto';
import { UsersService } from 'src/users/users.service';
export declare class ChannelService {
    private readonly prisma;
    private readonly userService;
    readonly ALGORITHM = "aes-192-cbc";
    private readonly KEY_LENGTH;
    private readonly IV_LENGTH;
    private readonly PASSWORD;
    private key;
    private logger;
    constructor(prisma: PrismaService, userService: UsersService);
    encrypt(text: string): string;
    decrypt(text: string): string;
    private hashPassword;
    private checkPassword;
    createChannel1(userId: number, createChannelDto: CreateChannelDto): Promise<Channel>;
    findAllChannels(): Promise<Channel[]>;
    createChannel(createChannelDto: CreateChannelDto): Promise<Channel>;
    getChannelsByUserId(userId: number): Promise<Channel[]>;
    diffChannel(channel: any, newChannel: UpdateChannelDto): boolean;
    updatePassword(channel: UpdateChannelDto, password: string, type: string): string;
    updateType(channel: UpdateChannelDto, type: string): string;
    updateChannel(channel: any, newchannelDto: UpdateChannelDto): Channel;
    updateChannelByUserId(userId: number, data: UpdateChannelDto): Promise<Channel>;
    deleteChannelByNameAndOwnerId(name: string, userId: number): Promise<void>;
    deleteChannelByName(name: string): Promise<void>;
    deleteAllChannelsByOwnerId(userId: number): Promise<void>;
    deleteChannelByChannelIdOwnerId(userId: number, channelId: string): Promise<void>;
    findChannelByChannelIdOwnerId(channelId: string, ownerId: string): Promise<{
        id: string;
        name: string;
        type: string;
        password: string;
        createdAt: Date;
        ownerId: number;
    }>;
    findAllChannelByOwnerId(channelId: string, ownerId: string): Promise<{
        password: any;
        id: string;
        name: string;
        type: string;
        createdAt: Date;
        ownerId: number;
    }[]>;
    findChannelByName(name: string): Promise<Channel | null>;
    findChannelByNameOwnerId(name: string, ownerId: string): Promise<Channel | null>;
    getChannelSocketDtoByChannel(channel: Channel): Promise<ChannelSocketDto>;
    addMemberToChannel(channelId: string, userId: number, password?: string): Promise<Channel>;
    removeMemberFromChannel(channelId: string, userId: number): Promise<Channel | null>;
    listMembersByChannelId(channelId: string): Promise<ChannelMembership[]>;
    addMessageToChannel(channelId: string, userId: number, content: string): Promise<Channel>;
    removeMessageChannelByMessageId(messageId: string): Promise<void>;
    listMessageByChannelId(channelId: string): Promise<Message[]>;
    getMessagesForChannel(channelId: string): Promise<Message[] | null>;
    sendMessageToUserByUserId(senderId: number, receiverId: number, messageContent: string): Promise<void>;
    ifChannelExistsByName(name: string): Promise<Channel | null>;
    createMessageUnique(createMessageDto: CreateMessageDto): Promise<Message | null>;
    addMessageInChannel(createMessageDto: any): Promise<Message[] | null>;
    createPrivateChannel(senderId: number, receiverId: number): Promise<Channel | null>;
    addChannelMembershipToUser(channelId: string, userId: number): Promise<User | null>;
    removeChannelMembershipToUser(channelId: string, userId: number): Promise<boolean>;
    removeMemberToChannel(channelId: string, userId: number): Promise<ChannelMembership | null>;
    getAvailableChannelsForUser(userId: number): Promise<Channel[]>;
    findUserIdByPseudo(pseudo: string): Promise<number>;
    findChannelById(id: string): Promise<Channel>;
}
