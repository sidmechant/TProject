import { Player, Match, User, Friend, UserStatus } from '@prisma/client';
import { PrismaService } from '../../prisma/prisma.service';
import { CrudService } from 'src/auth/forty-twoapi/crud.service';
export declare class PlayersService {
    private readonly prisma;
    private readonly crudService;
    constructor(prisma: PrismaService, crudService: CrudService);
    getPlayerById(id: number): Promise<Player>;
    findUserById(id: number): Promise<User | null>;
    setPlayerUrlPhotoProfile(id: number, urlPhotoProfile: string): Promise<Player>;
    setPlayerPseudo(id: number, pseudo: string): Promise<Player>;
    getAllMatchesByPlayerId(id: number): Promise<Match[]>;
    getAllPlayers(): Promise<Player[]>;
    deletePlayer(playerId: number): Promise<Player>;
    addMatchToPlayer(playerId: number, matchId: number): Promise<Player>;
    isPseudoUnique(pseudo: string, id: number): Promise<boolean>;
    getPlayerByPseudo(pseudo: string): Promise<Player>;
    getPhotoUrlById(id: number): Promise<{
        urlPhotoProfile: string;
    }>;
    checkProfileUpdated(userId: number): Promise<boolean>;
    isTwoFactorAuthenticationEnabled(userId: number): Promise<boolean>;
    sendFriendRequest(senderId: number, receiverPseudo: string): Promise<Friend>;
    acceptFriendRequest(userId: number, requesterId: number): Promise<Friend>;
    declineFriendRequest(userId: number, requesterId: number): Promise<Friend>;
    isBlockedByUser(senderId: number, receiverId: number): Promise<boolean>;
    blockUser(userId: number, friendId: number): Promise<void>;
    updateUserStatus(userId: number, status: UserStatus): Promise<User>;
    getUserStatus(userId: number): Promise<UserStatus>;
    getFriendsOfUser(userId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        username: string;
        displayname: string;
        role: import(".prisma/client").$Enums.Role;
        lastname: string;
        firstname: string;
        profileurl: string;
        emails: string;
        phoneNumbers: string;
        photourl: string;
        twoFactorAuthenticationSecret: string;
        isTwoFactorAuthenticationEnabled: boolean;
        urlPhotoProfile: string;
        sessionId: string;
        isProfileUpdated: boolean;
        status: import(".prisma/client").$Enums.UserStatus;
    }[]>;
    getUsersOnline(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        username: string;
        displayname: string;
        role: import(".prisma/client").$Enums.Role;
        lastname: string;
        firstname: string;
        profileurl: string;
        emails: string;
        phoneNumbers: string;
        photourl: string;
        twoFactorAuthenticationSecret: string;
        isTwoFactorAuthenticationEnabled: boolean;
        urlPhotoProfile: string;
        sessionId: string;
        isProfileUpdated: boolean;
        status: import(".prisma/client").$Enums.UserStatus;
    }[]>;
}
